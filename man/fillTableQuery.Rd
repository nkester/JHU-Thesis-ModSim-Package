% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_utils_fillTableQuery.R
\name{fillTableQuery}
\alias{fillTableQuery}
\title{SQL Insert Query Builder}
\usage{
fillTableQuery(data, tableName, serial = "DEFAULT")
}
\arguments{
\item{data}{This is a tibble of any dimension although thought should be given
to very large datasets. It may be better to break the INSERT query into multiple
smaller pushes.}

\item{tableName}{This is the name of the table. Note that some DBMS (namely)
PostgreSQL does not automatically honor case. It is best to be explicit by
wrapping all names within \"<name>\". Additionally, you may be explicity by
including in this parameter the order of the table's fields you are providing.
This ensures the columns provided in the `data` parameter go to the proper
location. Do this like this: tableName = "\"<tableName\" (\"fieldOne\",
\"fieldTwo\")".}

\item{serial}{Any field in the `data` parameter with `NA` will be treated as
if it is the auto-incrementing primary key for the table. If using
PostgreSQL this should be "DEFAULT". If using SQLite it should be "NULL".}
}
\value{
This returns a character string that can be passed to a DBI::dbSendQuery
  function for execution on the DBMS.
}
\description{
This function takes a data frame and a table name (optionally including the
  field names in parentheses) and returns a string of a properly built SQL
  INSERT Query. This is most used with SQLite and PostgreSQL. Of note, to
  add the proper entry for auto-incrementing columns, pass an `NA` value for
  that field in the `data` parameter and provide the keyword in the `serial`
  parameter.
}
\author{
Neil Kester, \email{nkester1@jhu.edu}
}
